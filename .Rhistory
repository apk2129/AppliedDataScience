plot(pc1,pc2)
summary(trainAdults_pca)
pc1<-pc[,1]
pc2<-pc[,2]
order(pc1_coord,decreasing=TRUE)
plot(pc1,pc2)
require(scatterplot3d)
scatterplot3d(pc1,pc2,pc3)
pc.var<-trainAdults_pca$sdev ^2
pve=pc.var/sum(pc.var)
plot(cumsum(pve), xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,1) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,1) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,0.2) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,0.12) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,0.18) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,0.18) ,type="b")
prcomp
?prcomp
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,0.18) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,0.3) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,0.13) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,0.18) ,type="b")
scatterplot3d(pc1,pc2,pc3)
glm.fit=glm(salary~age+workclass+fnlwgt+education+education.num+marital.status
+occupation+relationship+race+sex+capital.gain+capital.loss
+hours.per.week+native.country,
data=trainAdults,family=binomial)
str(trainAdults)
setattr(testAdults$salary,"levels",c(1, 2))
glm.fit=glm(salary~age+workclass+fnlwgt+education+education.num+marital.status
+occupation+relationship+race+sex+capital.gain+capital.loss
+hours.per.week+native.country,
data=trainAdults,family=binomial)
setattr(trainAdults$salary,"levels",c(1, 2))
glm.fit=glm(salary~age+workclass+fnlwgt+education+education.num+marital.status
+occupation+relationship+race+sex+capital.gain+capital.loss
+hours.per.week+native.country,
data=trainAdults,family=binomial)
str(trainAdults)
trainAdults$salary<-as.factor(trainAdults$salary)
setattr(trainAdults$salary,"levels",c(1, 2))
glm.fit=glm(salary~age+workclass+fnlwgt+education+education.num+marital.status
+occupation+relationship+race+sex+capital.gain+capital.loss
+hours.per.week+native.country,
data=trainAdults,family=binomial)
trainAdults$salary<-as.factor(trainAdults$salary)
glm.fit=glm(salary~age+workclass+fnlwgt+education+education.num+marital.status
+occupation+relationship+race+sex+capital.gain+capital.loss
+hours.per.week+native.country,
data=trainAdults,family=binomial)
str(trainAdults)
summary(glm.fit)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.probs[1:10]
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
plot(glm.probs)
boxplot(glm.probs)
mean(glm.pred==salary) #Accuracy
plot(glm.probs)
boxplot(glm.probs)
mean(glm.pred==salary) #Accuracy
testAdults$salary<-as.factor(testAdults$salary)
attach(testAdults)
e<-table(salary,glm.pred)
plot(glm.probs)
boxplot(glm.probs)
mean(glm.pred==salary) #Accuracy
setattr(trainAdults$salary,"levels",c(1, 2))
attach(testAdults)
e<-table(salary,glm.pred)
plot(glm.probs)
boxplot(glm.probs)
mean(glm.pred==salary) #Accuracy
setattr(testAdults$salary,"levels",c(1, 2))
glm.fit=glm(salary~age+workclass+fnlwgt+education+education.num+marital.status
+occupation+relationship+race+sex+capital.gain+capital.loss
+hours.per.week+native.country,
data=trainAdults,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.probs[1:10]
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
plot(glm.probs)
mean(glm.pred==salary) #Accuracy
print(precision.logistic<-e[1,1]/(e[1,1]+e[2,1])) # Precision
print(recall.logistic<-e[1,1]/(e[1,1]+e[1,2])) # Recall
order(pc1_coord,decreasing=TRUE)
summary(trainAdults_pca)
plot(pve, xlab=" Principal Component ", ylab ="Proportion of Variance Explained ", ylim=c(0,0.18) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Variance Explained ", ylim=c(0,0.18) ,type="b")
summary(trainAdults_pca)
pc<-predict(trainAdults_pca)
pc1<-pc[,1]
pc2<-pc[,2]
pc3<-pc[,3]
pc1_coord<-trainAdults_pca$rotation[,1]
order(pc1_coord,decreasing=TRUE)
plot(pc1,pc2)
View(pc)
plot(pc1,pc2)
summary(trainAdults_pca)
?pcrcomp
prcomp
?prcomp
pc1_coord<-trainAdults_pca$rotation[,1]
order(pc1_coord,decreasing=TRUE)
plot(pc1,pc2)
?prcomp
plot(pve, xlab=" Principal Component ", ylab ="Variance Explained ", ylim=c(0,0.18) ,type="b")
?cv.glmnet
require(useful)
?cv.glmnet
require(glmnet)
?cv.glmnet
plot(cumsum(pve), xlab=" Principal Component ", ylab ="Variance Explained ", ylim=c(0,0.18) ,type="b")
plot(cumsum(pve), xlab=" Principal Component ", ylab ="Variance Explained ", ylim=c(0,1) ,type="b")
plot(pve, xlab=" Principal Component ", ylab ="Variance Explained ", ylim=c(0,.18) ,type="b")
glm.fit=glm(salary~marital.status
+relationship,
data=trainAdults,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.probs[1:10]
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
plot(glm.probs)
boxplot(glm.probs)
mean(glm.pred==salary) #Accuracy
print(precision.logistic<-e[1,1]/(e[1,1]+e[2,1])) # Precision
print(recall.logistic<-e[1,1]/(e[1,1]+e[1,2])) # Recall
glm.fit=glm(salary~age+workclass+fnlwgt+education+education.num+marital.status
+occupation+relationship+race+sex+capital.gain+capital.loss
+hours.per.week+native.country,
data=trainAdults,family=binomial)
attach(testAdults)
e<-table(salary,glm.pred)
plot(glm.probs)
boxplot(glm.probs)
mean(glm.pred==salary) #Accuracy
glm.fit=glm(salary~age+workclass+fnlwgt+education+education.num+marital.status
+occupation+relationship+race+sex+capital.gain+capital.loss
+hours.per.week+native.country,
data=trainAdults,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.probs[1:10]
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
plot(glm.probs)
mean(glm.pred==salary) #Accuracy
glm.fit=glm(salary~age+education+sex+capital.gain
+hours.per.week,
data=trainAdults,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.probs[1:10]
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
mean(glm.pred==salary) #Accuracy
glm.fit=glm(salary~age+education+sex+capital.gain+capital.loss+
+hours.per.week,
data=trainAdults,family=binomial)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
mean(glm.pred==salary) #Accuracy
glm.fit=glm(salary~age+education+sex+capital.gain+capital.loss+
+hours.per.week+marital.status,
data=trainAdults,family=binomial)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
mean(glm.pred==salary) #Accuracy
order(pc1_coord,decreasing=TRUE)
plot(pve, xlab=" Principal Component ", ylab ="Variance Explained ", ylim=c(0,.18) ,type="b")
glm.fit=glm(salary~fnlwgt+marital.status
+occupation+relationship,
data=trainAdults,family=binomial)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.probs[1:10]
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
mean(glm.pred==salary) #Accuracy
glm.fit=glm(salary~age+edcation,
data=trainAdults,family=binomial)
glm.fit=glm(salary~age+education,
data=trainAdults,family=binomial)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
mean(glm.pred==salary) #Accuracy
require(MASS)
class(formulaAfterLasso)
lda.fit = lda(salary~.,data=trainAdults)
lda.fit = lda(formulaAfterLasso,data=trainAdults)
lda.pred = predict(lda.fit, testAdults)
table(lda.pred$class, testAdults$salary)
mean(lda.pred$class == testAdults$salary) #0.8062555
qda.fit = qda(salary~.,data=trainAdults)
qda.pred <- predict(qda.fit , testAdults)
table(qda.pred$class, testAdults$salary)
mean(qda.pred$class == testAdults$salary) #0.7955349
qda.fit = qda(salary~marital.status+relationship,data=trainAdults)
qda.pred <- predict(qda.fit , testAdults)
table(qda.pred$class, testAdults$salary)
mean(qda.pred$class == testAdults$salary) #0.7955349
lda.fit = lda(salary~marital.status+relationship,data=trainAdults)
lda.pred = predict(lda.fit, testAdults)
table(lda.pred$class, testAdults$salary)
mean(lda.pred$class == testAdults$salary) #0.8062555
lda.fit = lda(salary~age+education,data=trainAdults)
lda.pred = predict(lda.fit, testAdults)
table(lda.pred$class, testAdults$salary)
mean(lda.pred$class == testAdults$salary) #0.8062555
lda.fit = lda(salary~age+education+sex+capital.gain+hours.per.week,data=trainAdults)
lda.pred = predict(lda.fit, testAdults)
table(lda.pred$class, testAdults$salary)
mean(lda.pred$class == testAdults$salary) #0.8062555
qda.fit = qda(salary~age+education+sex+capital.gain+hours.per.week,data=trainAdults)
qda.pred <- predict(qda.fit , testAdults)
table(qda.pred$class, testAdults$salary)
mean(qda.pred$class == testAdults$salary) #0.7955349
trainAdults$salary <- as.factor(trainAdults$salary)
testAdults$salary <- as.factor(testAdults$salary)
nbModel <- naiveBayes(salary ~age+education+sex+capital.gain+hours.per.week, data = trainAdults)
library(e1071)
trainAdults$salary <- as.factor(trainAdults$salary)
testAdults$salary <- as.factor(testAdults$salary)
nbModel <- naiveBayes(salary ~age+education+sex+capital.gain+hours.per.week, data = trainAdults)
nbPred <- predict(nbModel, testAdults)
str(testAdults)
table(nbPred, testAdults$salary)
mean(nbPred == testAdults$salary)
nbModel <- naiveBayes(salary ~., data = trainAdults)
nbPred <- predict(nbModel, testAdults)
str(testAdults)
table(nbPred, testAdults$salary)
mean(nbPred == testAdults$salary)
knn.pred = knn(trainAdults, testAdults, trainAdults$salary, k=1)
table(knn.pred, testAdults$salary)
mean(knn.pred == testAdults$salary) #0.7197171
knn.pred = knn(trainAdults, testAdults, trainAdults$salary, k=3)
table(knn.pred, testAdults$salary)
mean(knn.pred == testAdults$salary) #0.7197171
knn.pred = knn(trainAdults, testAdults, trainAdults$salary, k=5)
table(knn.pred, testAdults$salary)
mean(knn.pred == testAdults$salary) #0.7197171
?knn
knn.pred = knn(trainAdults[,c(6,8)], testAdult[,c(6,8)], trainAdults$salary, k=5)
knn.pred = knn(trainAdults[,c(6,8)], testAdults[,c(6,8)], trainAdults$salary, k=5)
knn.pred = knn(trainAdults[,c(6,8)], testAdults[,c(6,8)], trainAdults$salary, k=1)
table(knn.pred, testAdults$salary)
mean(knn.pred == testAdults$salary) #0.7197171
knn.pred = knn(trainAdults[,c(6,8)], testAdults[,c(6,8)], trainAdults[,c(6,8)]$salary, k=1)
nrow(trainAdults[,c(6,8)])
dim(trainAdults[,c(6,8)])
dim(testAdults[,c(6,8)])
str(trainAdults[,c(6,8)])
str(trainAdults[,c(6,8,14)])
str(trainAdults[,c(6,8,15)])
str(trainAdults[,c(6,8,15)])
knn.pred = knn(trainAdults[,c(6,8,15)], testAdults[,c(6,8,15)], trainAdults[,c(6,8,15)]$salary, k=1)
?knn
head(trainAdults[,c(6,8,15)]$salary)
class(trainAdults[,c(6,8,15)]$salary)
class(trainAdults[,c(6,8,15)])
table(knn.pred, testAdults[,c(6,8)]$salary)
knn.pred = knn(trainAdults[,c(6,8,15)], testAdults[,c(6,8,15)], trainAdults[,c(6,8,15)]$salary, k=1)
knn.pred = knn(trainAdults[,c(6,8,15)], testAdults[,c(6,8,15)], trainAdults[,c(6,8,15)]$salary, k=499)
knn.pred = knn(trainAdults, testAdults, trainAdults$salary, k=1)
table(knn.pred, testAdults$salary)
mean(knn.pred == testAdults$salary) #0.7197171
adults <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data", sep=",",
col.names=c("age", "workclass", "fnlwgt", "education", "education-num",
"marital-status", "occupation", "relationship", "race", "sex", "capital-gain",
"capital-loss", "hours-per-week", "native-country", "salary"),
na.strings = "?", strip.white = T)
nrow(adults[complete.cases(adults),])
cleanAdults = adults[complete.cases(adults),]
setattr(cleanAdults$salary,"levels",c(0, 1))
require(data.table)
setattr(cleanAdults$salary,"levels",c(0, 1))
index<-createDataPartition(cleanAdults[,15],p=0.5,list=FALSE)
trainAdults<-cleanAdults[index,]
testAdults<-cleanAdults[-index,]
knn.pred = knn(trainAdults, testAdults, trainAdults$salary, k=1)
knn.pred = knn(trainAdults, testAdults, trainAdults$salary, k=1)
table(knn.pred, testAdults$salary)
mean(knn.pred == testAdults$salary) #0.7197171
cleanAdults<-as.data.frame(sapply(cleanAdults, as.numeric))
cleanAdults <- data.frame(scale(cleanAdults))
View(cleanAdults)
trainAdults$salary<-as.factor(trainAdults$salary)
testAdults$salary<-as.factor(testAdults$salary)
setattr(trainAdults$salary,"levels",c(1, 2))
setattr(testAdults$salary,"levels",c(1, 2))
glm.fit=glm(salary~marital.status+relationship,
data=trainAdults,family=binomial)
glm.probs=predict(glm.fit,newdata=testAdults, type="response")
glm.probs[1:10]
glm.pred=ifelse(glm.probs>0.5,"2","1")
attach(testAdults)
e<-table(salary,glm.pred)
plot(glm.probs)
mean(glm.pred==salary) #Accuracy
print(precision.logistic<-e[1,1]/(e[1,1]+e[2,1])) # Precision
print(recall.logistic<-e[1,1]/(e[1,1]+e[1,2])) # Recall
defaultsummary(glm.fit)
summary(glm.fit)
require(caret)
defaultsummary(glm.fit)
?defaultsummary
defaultSummary(glm.fit)
defaultSummary(glm.probs)
?predict
defaultSummary(glm.probs$se.fit)
?R2
defaultSummary(glm.pred)
R2(glm.pred,salary)
?AIC
?BIC
AIC(glm.pred,k=2)
AIC(glm.probs,k=2)
AIC(glm.fit,k=2)
?BIC
BIC(glm.fit)
AIC(knn.pred,k=2)
BIC(knn.pred)
AIC(qda.fit,k=2)
AIC(qda.fit,k=log(nrow(trainAdults)))
AIC(qda.fit)
AIC(lda.fit)
AIC(knn.pred)
AIC(glm.fit,k=2)
BIC(glm.fit)
AIC(nbPred)
BIC(nbPred)
?extractAIC
?extractBIC
extractAIC(qda.fit)
extractAIC(logLik(qda.fit))
AIC(logLik(qda.fit))
?logLik
class(qda.fit)
summary(qda.fit)
\boldtext{K Nearest Neighbor}
housing <- read.table("http://jaredlander.com/data/housing.csv")
housing <- read.table("http://jaredlander.com/data/housing.csv")
housing <- read.table("http://jaredlander.com/data/housing.csv",sep=",", header=TRUE, stringsAsFactors=FALSE)
View(housing)
names(housing) <- c("Neighbourhood","Class","Units","YearBuilt","SqFt","Income","IncomePerSqFt","Expense","ExpensePerSqFt","NetIncome","Value","ValuPerSqFt","Boro")
View(housing)
names(housing) <- c("Neighborhood","Class","Units","YearBuilt","SqFt","Income","IncomePerSqFt","Expense","ExpensePerSqFt","NetIncome","Value","ValuPerSqFt","Boro")
View(housing)
housing <- housing[housing$Units<1000,]
head(housing)
names(housing) <- c("Neighborhood","Class","Units","YearBuilt","SqFt","Income","IncomePerSqFt","Expense","ExpensePerSqFt","NetIncome","Value","ValuePerSqFt","Boro")
house1 <- lm(ValuePerSqFt)
house1 <- lm(ValuePerSqFt~Units+SqFt+Boro, data=housing)
summary(house1)
require(coefplot)
install.packages("coefplot")
coefplot(house1)
require(coefplot)
coefplot(house1)
ggplot(housing,aes(x=ValuePerSqFt)+geom_histogram())
ggplot(housing,aes(x=ValuePerSqFt))+geom_histogram()
ggplot(housing,aes(x=ValuePerSqFt,fill=Boro,color=Boro))+geom_histogram()
mse <- function(y,yhat)
mean((y-yhat)^2)
}
mse <- function(y,yhat)
{
mean((y-yhat)^2)
}
mse(housing$ValuePerSqFt, house1$fitted.values)
house2 <- lm(ValuePerSqFt ~ Units*SqFt+Boro, data=housing)
house3 <- lm(ValuePerSqFt ~ Units+ SqFt*Boro + Class, data=housing)
house4 <- lm(ValuePerSqFt ~ Units+ SqFt*Boro + SqFt*Class, data=housing)
house5 <- lm(ValuePerSqFt ~ Boro + Class, data=housing)
multiplot(house1,house2,house3,house4,house5)
mse(housing$ValuePerSqFt, house2$fitted.values)
mse(housing$ValuePerSqFt, house2$fitted.values)
mse(housing$ValuePerSqFt, house3$fitted.values)
mse(housing$ValuePerSqFt, house4$fitted.values)
mse(housing$ValuePerSqFt, house5$fitted.values)
AIC(house1,house2,house3,house4,house5)
BIC(house1,house2,house3,house4,house5)
anova(house1,house2,house3,house4,house5)
require(boot)
house1 <- glm(ValuePerSqFt ~ Units+SqFt+Boro, data=housing)
house2 <- glm(ValuePerSqFt ~ Units*SqFt+Boro, data=housing)
house3 <- glm(ValuePerSqFt ~ Units+ SqFt*Boro + Class, data=housing)
house4 <- glm(ValuePerSqFt ~ Units+ SqFt*Boro + SqFt*Class, data=housing)
house5 <- glm(ValuePerSqFt ~ Boro + Class, data=housing)
cv.glm(housing, house1,K=5)
cv.glm(housing, house1,K=5)$delta
#' @return A single cross-validated error
#' @title cv.work
#' @description Calculate the cross-validation error
#' @author Jared
#' @return A single cross-validated error
#' @param fun the modeling function
#' @param k the number of folds
#' @param data The data
#' @param cost A cost function
#' @param response Character name of column that is the response
#' @param \dots Catchall for arguments to fun
cv.work <- function(fun, k=5, data, cost, response="y", ...)
{
folds <- data.frame(Fold=sample(rep(1:k,length.out=nrow(data))), Row=1:nrow(data))
error <- 0
for(f in 1:k)
{ #which rows in test set
theRows <- folds$Row[folds$Fold == f]
mod <- fun(data=data[-theRows,], ...)
pred <- predict(mod, data[theRows,])
theCost <- cost(data[,response],pred)
error <- error + theCost*(length(theRows)/nrow(data))
}
return(error)
}
cv.work(fun=lm,k=5,data=housing,cost=mse, response="ValuePerSqFt", formula=ValuePerSqFt ~ Units + Boro)
cv.work <- function(fun, k=5, data, cost, response="y", ...)
{
folds <- data.frame(Fold=sample(rep(1:k,length.out=nrow(data))), Row=1:nrow(data))
error <- 0
for(f in 1:k)
{ #which rows in test set
theRows <- folds$Row[folds$Fold == f]
mod <- fun(data=data[-theRows,], ...)
pred <- predict(mod, data[theRows,])
theCost <- cost(data[theRows,response],pred)
error <- error + theCost*(length(theRows)/nrow(data))
}
return(error)
}
cv.work(fun=lm,k=5,data=housing,cost=mse, response="ValuePerSqFt", formula=ValuePerSqFt ~ Units + Boro)
cv.work <- function(fun, k=5, data, cost, response="y", ...)
{
folds <- data.frame(Fold=sample(rep(1:k,length.out=nrow(data))), Row=1:nrow(data))
error <- 0
for(f in 1:k)
{ #which rows in test set
theRows <- folds$Row[folds$Fold == f]
mod <- fun(data=data[-theRows,], ...)
pred <- predict(mod, data[theRows,])
theCost <- cost(data[theRows,response],pred)
error <- error + theCost*(length(theRows)/NROW(data))
}
return(error)
}
cv.work(fun=lm,k=5,data=housing,cost=mse, response="ValuePerSqFt", formula=ValuePerSqFt ~ Units + Boro)
library(Rhipe)
rhinit()
rhwrite(list(1,2,3),"/tmp/x")
rhinit(TRUE, TRUE)
library(Rhipe)
rhinit()
rhinit(TRUE, TRUE)
rhwrite(list(1,2,3),"/tmp/x")
install.packages("rJava")
library(rJava)
R CMD javareconf
sudo R CMD javareconf
install.packages("rJava")
install.packages("rJava")
rhinit()
install.packages("rJava")
install.packages('rJava')
library(Rhipe)
rhinit()
rhinit()
library(Rhipe)
rhinit()
Sys.getenv(c("HADOOP","HADOOP_BIN"))
library(Rhipe)
library(Rhipe)
rhinit()
install.packages("rJava")
library(Rhipe)
library(Rhipe)
rhinit()
Sys.getenv(c("HADOOP","HADOOP_BIN"))
library(Rhipe)
Sys.getenv(c("HADOOP","HADOOP_BIN"))
Sys.getenv(c("HADOOP","HADOOP_BIN"))
echo $HADOOP_HOME
library(Rhipe)
rhinit()
Sys.getenv("HADOOP_HOME")
whic R
which R
library(Rhipe)
Sys.setenv(HADOOP_BIN = "/usr/local/Cellar/hadoop/2.3.0/bin")
library(Rhipe)
setwd("/Users/divikhanna/Desktop/ads_final_proj/")
Sys.setenv(HADOOP_HOME = "/usr/local/Cellar/hadoop/2.3.0")
library(Rhipe)
library(Rhipe)
q()
